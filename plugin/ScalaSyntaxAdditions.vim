
func! ScalaSyntaxAdditions ()

  call tools_scala#bufferMaps()
  call clearmatches()

  syntax match Normal "\v\=\=" conceal cchar=‚â°
  syntax match Normal "===" conceal cchar=‚â£
  " syntax match Normal "\s\zs\>\=\ze\s" conceal cchar=‚â•
  syntax match Normal "\v\+\+" conceal cchar=‚ß∫
  syntax match Normal "\v\|\|" conceal cchar=‚Äñ
  " syntax match Normal "\v\&\&" conceal cchar=Ôπ†

  " syntax match Normal '\vInt\ze(\W|\_$)' conceal cchar=I
  syntax match Normal '\vstring\ze(\W|\_$)' conceal cchar=S
  syntax match Normal 'String\.' conceal cchar=S
  syntax match Normal 'String' conceal cchar=S
  " syntax match Normal 'Int\.' conceal cchar=I
  syntax match Normal '\vBoolean\ze(\W|\_$)' conceal cchar=B

  " syntax match Normal 'List\ze\W' conceal cchar=‚ü¨
  syntax match Normal 'List' conceal cchar=ÀÜ
  syntax match Normal 'Set' conceal cchar= Ω
  syntax match Normal 'Map' conceal cchar= ∫
  syntax match Normal 'empty' conceal cchar=‚àÖ
  syntax match Normal 'Iterable' conceal cchar=‚ü¶
  syntax match Normal '::' conceal cchar=‚à∑
  " syntax match Normal 'Array\ze\W' conceal cchar=‚ü¶
  syntax match Normal 'Array' conceal cchar=A
  syntax match Normal 'Tuple' conceal cchar=T
  syntax match Normal 'tuple\:\s' conceal cchar=T
  syntax match Normal 'tuple\:\[' conceal cchar=T

  " syntax match Normal "def\ze\s" conceal cchar=‚Üí
  syntax match Normal "def\s" conceal
  syntax match Normal 'Unit' conceal cchar=‚ú¥
  syntax match Normal 'Option' conceal cchar=‚à¶
  syntax match Normal 'Either' conceal cchar=‚à•

  syntax match Normal "<-" conceal cchar=‚Üê
  syntax match Normal "_\s<-\ze\s" conceal cchar=‚Ä¢

  syntax match Normal "()" conceal cchar=‚àò

  syntax match Normal "\v\=\>" conceal cchar=‚áí

  " The collon before a type or an object value
  syntax match Normal "\w\zs:\ze\s" conceal
  syntax match Normal ")\zs:" conceal cchar=ÀÉ
  " When the type collon is the last char e.g. in enum defs
  syntax match Normal "\v:\ze$" conceal
  syntax match Normal ")\s\zs=>\ze\s.*=>" conceal cchar=‚áæ

  syntax match Normal "^val\s" conceal
  syntax match Normal "\s\zsval\s" conceal

  syntax match Normal '"' conceal
  syntax match Normal '""' conceal cchar=‚àÖ

  " TODO: can't match "export" twice? ~/Documents/Server-Dev/d_gql_edb/src/b_ramda_pipe_async_examples.ts#/export%20function%20ac
  " syntax match Normal "export\s\zsfunction\ze\s" conceal cchar=‚Üí
  syntax match Normal "\v\(\)\s\=\>" conceal cchar=Àç
  syntax match Normal "\v_\s\=\>" conceal cchar=Àç

  syntax match Normal '\s\zs>\ze\s' conceal cchar=‚ñ∑
  syntax match Normal '\s\zs<\ze\s' conceal cchar=‚óÅ

  syntax match Normal 'i => {i' conceal cchar=_
  syntax match Normal 'i => i' conceal cchar=¬ª
  syntax match Normal 'x => x\ze\s' conceal cchar=_
  syntax match Normal 'x => x\ze\.' conceal cchar=_

  syntax match Normal 'PartialFunction' conceal cchar=‚ûî
  syntax match Normal "\v\-\>" conceal cchar=‚ûî

  syntax match Normal '\vfor\ze(\W|\_$)' conceal cchar=‚äÉ
  syntax match Normal 'yield' conceal cchar=‚äÇ

  syntax match Normal 'ZIO\ze\[' conceal cchar=·¥±
  syntax match Normal 'UIO\ze\[' conceal cchar=·¥±
  syntax match Normal 'IO\ze\[' conceal cchar=·¥±
  syntax match Normal 'ZIO\.' conceal cchar=‚Åù
  syntax match Normal 'ZIO\.\$\.' conceal cchar=‚Åù
  syntax match Normal 'flatMap' conceal cchar=‚Ü£
  syntax match Normal 'collect' conceal cchar=‚âö
  " syntax match Normal 'collect' conceal cchar=Íúõ

  syntax match Normal 'Exception' conceal cchar=‚óå
  " syntax match Normal 'IO\zeException' conceal cchar=‚´†
  syntax match Normal 'IOException' conceal cchar=‚äù

  " ‚ûî  ‚áæ  ‚Üí  ÀÉ ‚ûü ‚á¢ À≤ ‚Üó ‚Üí ‚Üí   À∑ ÀçÀç À≥ Óòã
  syntax match Normal 'orElse' conceal cchar=‚óá
  syntax match Normal '<>' conceal cchar=‚óá
  syntax match Normal '*>' conceal cchar=‚ñ∑
  syntax match Normal 'applyOrElse' conceal cchar=‚áæ

  syntax match Normal 'if\ze\W' conceal cchar=Àª
  syntax match Normal 'else' conceal cchar=Àº
  syntax match Normal 'then' conceal cchar=Àπ

  syntax match Normal 'case' conceal cchar=À∞
  syntax match Normal 'match' conceal cchar=‚åã

  syntax match Normal 'map' conceal cchar=‚ûö
  syntax match Normal 'as\ze(' conceal cchar=Íúú

  syntax match Normal 'self' conceal cchar=‚àù
  syntax match Normal 'override' conceal cchar=‚â°
  syntax match Normal 'lazy' conceal cchar=~
  syntax match Normal 'final' conceal cchar=.
  syntax match Normal 'sealed' conceal cchar=.
  syntax match Normal 'implicit' conceal cchar=ùëñ
  syntax match Normal 'class' conceal cchar=C
  syntax match Normal 'case class' conceal cchar=ÀΩ
  syntax match Normal 'trait' conceal cchar=T
  syntax match Normal 'enum' conceal cchar=|
  syntax match Normal 'object' conceal cchar=‚ó¶
  syntax match Normal 'make' conceal cchar=Àñ

  syntax match Normal '\s\zs\.' conceal cchar=Àç
  " syntax match Normal '\S\zs\.\ze\S' conceal cchar=Àç
  " syntax match Normal '\.\ze\S' conceal cchar=Àç
  syntax match Normal '\.\ze\S' conceal cchar= 

  syntax match Normal '\vA\ze(,|\])' conceal cchar=ùëé
  syntax match Normal '\vR\ze(,|\])' conceal cchar=ùëü
  syntax match Normal '\vE\ze(,|\])' conceal cchar=ùëí
  syntax match Normal '\vB\ze(,|\])' conceal cchar=ùëè
  syntax match Normal '\vC\ze(,|\])' conceal cchar=ùëê

  syntax match InlineTestDeclaration '\v^val\se\d_\i{-}\s\=' conceal cchar=‚Ä•
  syntax match InlineTestDeclaration '\v^val\sa\d_\i{-}\s\=' conceal cchar=‚Ä¶

  syntax match Normal '\v\/\/\>\susing\slib\s' conceal



  " Hide comment character at beginning of line
  syntax match Normal '\v^\s*\zs\/\/\s' conceal
  " call matchadd('Conceal', '\v^\s*\zs#\s', 12, -1, {'conceal': ''})
  " call matchadd('Conceal', '\v^\s*\zs\/\/\s', 12, -1, {'conceal': ''})

  " This replaces: call CodeMarkupSyntaxHighlights()
  syntax match BlackBG '\v‚îÄ(\^|\s)\s{2}\S.*'
  " Hilde \" before comment after code
  " call matchadd('Conceal', '\s\zs\#\ze\s', 12, -1, {'conceal': ''})
  " call matchadd('Conceal', '\s\zs\\/\/\ze\s', 12, -1, {'conceal': ''})
  " Conceal "%20" which is used for "h rel.txt" with space
  " call matchadd('Conceal', '%20', 12, -1, {'conceal': ' '})
  " call matchadd('Conceal', '#/', 12, -1, {'conceal': '|'})
  " ~/.vim/notes/notes-navigation.md#/Create%20hyperlink%20to

  set conceallevel=2 " ‚ñ†
  set concealcursor=ni " ‚ñ≤
  " This will add one space before the foldmarker comment with doing "zfaf": func! ..ns() "{{_{
  " set commentstring=\ \"%s
  " set commentstring=\ \/\/%s

endfunc




