
" ‚Üî ‚Üï ‚áø ‚ü∑
" …™ –∏ ·µì·µî ·µõ Óò¶ Óò´ Óò†  ->    ‚É£
" ‚ûî  ‚áæ  ‚Üí  ÀÉ ‚ûü ‚á¢ À≤ ‚Üó ‚Üí ‚Üí   À∑ ÀçÀç À≥ Óòã  Ôö¶ Óòí ‚ü£ ‚ó¶ Ô≠Ñ Ô¨ò  Ôö∑ ÔßØÔÄ¢
" ‚áõ ‚âà ‚ä™ ‚ä© ‚äß ‚§é ‚´ª ‚´Ω‚Äπ‚Ä∫ ‚Äª ‚àü ‚ßΩ ‚®û ‚≠¢   ‚Ü§ ‚Ü£
" ‚äé ÀΩ ‚äî ‚©Ö u  Õ≠ Õ®  ‡´ß◊ó  ‡´∞ ÀÖ ‚åÑ ÀØ ‚Ü° ‚Üß ‚âè ‚äΩ ‚ãì ‚âó ‚àø ‚àæ  ‚âÄ ‚âÅ ‚û≥  ‚û∫  ‚ûΩ
" ‚äü  ‚ä° | ‚äñ  ‚äô ‚ñ≤  ≤  ≥  ∫  Ω π ÀÇ ÀÑ ÀÜ Àå Àì ‚ÇäÀñ‚Å∫Ôπ¢+ À† À° À£ À∂ ÀΩ  ·¥∫ ·µÄ ·µà ·µë ·µì  ∫ 
" ‚Äù  ‚çò ‚Äô ‚çû  ‚ç£ ‚ç§‚ç¶‚ç™‚ç≥ ‚çΩ ‚çø ‚éÖ ‚éá  ‚éé ‚éö
" ‚ûî  ‚áæ  ‚Üí  ÀÉ ‚ûü ‚á¢ À≤ ‚Üó ‚Üí ‚Üí   À∑ ÀçÀç À≥ Óòã  Ôö¶ Óòí ‚ü£ ‚ó¶ Ô≠Ñ Ô¨ò  Ôö∑ ÔßØÔÄ¢
" ¬´ ¬ª ¬´ Àù Àö Àô ‚ßßÀñÕú ÕùÀòÀüÀ¢À°À§À≥ ‚ïéùëé Œ± Œ≤  ‚üØ‚üÆ‚ü¶‚ïå ‚à•,aÕ°,b, e Õ¢ e  ◊∞ ‚àó ‚á£ ‚á® ‚á¢ 
" ‚Åù ‚Åá‚Äº  ‚É™ ‚Åû  ‚É©‚ÅΩ‚Åµ‚Åæ ‚É¶ ‚Éü  e‚É®  ‚äç ‚äê ‚äî ‚äù ‚äü
" ‚Üª  ‚Ü∂ ‚Ü∑ ‚áµ ‚á† ‚áΩ |‚áæ| ‚áø ‚à© ‚à¥ ‚àπ  ‚âÄ ‚àø  ‚âª  ‚äÇ  Ä …¢ ·¥≥ …ç  Õ¨r‚äÉ ·¥Ö ùëë ‚äÜ  ‚äá ‚âì 
" ‚ãÆ ‚åá ‚åí  ‚åî  ‚åó ‚åò‚ú±‚å©  ÀªÀå¬® ‚äü  ‚ä° | ‚äñ  ‚äô
" ‚ãã  ‚ãê  ‚ãò  ‚ãØ  ‚åò ‚àò   ‚òæ  ‚ôΩ ‚ô∫   ‚ò≥     ‚öê ‚öÄ   ‚àü  ‚à©        ùëüS   ÄS
" ÀÉ À≤  À≤ Àø  Õê Õ¢  ‚Éó  ‚ÉØ  ‚Üí   ‚Üò   ‚Üó   ‚Ü£  ‚ûô ‚áß ‚á° ‚áë ‚Ü•‚Ü•  ‚ûî ‚ûö  ‚ûü  ‚û¢ ‚ûù  ‚û©  ‚û≤ 
" ‚û≥  ‚ûΩ  ‚üÄ  ‚üÑ  ‚üÉ  ‚üî  ‚ü•  ‚ü£ ‚åÅ  ‚Üí  ‚ÉØ  ÀÉ À™ ‚ëÜ ùåÖ ùåÄ ‚ãî ‚ãï ‚ãó ‚ã≤ ‚ã≥ ‚ãµ ‚ã∑ ‚ã∫ ‚ãø ‚åá
" ‚ëÇ ‚ëÉ ‚ëÑ ‚´ô ‚´ó ‚´ï ‚´ñ ‚´ê ‚´¥ ‚´ù
" ‚üõ   ‚ü© ‚ü´  ‚üØ  ‚ü∂   ‚ßµ ‚†∞ ‚†Ç‚†á ‚†É ‚†à ‚†Å ‚†å  Ôπö Ôπú ‚≠°   Ôø™ ‚Üë Íúõ ·ê® ‚òâ‚äô‚äô‚óé‚äñ  ‚äò ‚´û 
" ‚óå  ‚óè  ‚óé  ‚óò  ‚ó¶ ‚ó´  ‚óØ  ‚ñø ‚ñ∏ ‚ñ≠  ‚ñ™  ‚ñ´  ‚ñ¨  ‚ñ¢  ‚ñ° ‚ñó   ‚óñ  ‚òâ  ‚Ä¢‚ãÜ‚Ä¢ ‚ñ™
" ‚óÜ  ‚óá  ‚óà  ‚óª  ‚óΩ  ‚òÄ  ‚òº  Ÿ≠  ‚ãÜ ‚òÖ  ‚òÜ  ‚ú∑‚ú¥  ‚ú± ‚ùÇ ‚ùà  ‚ôΩ
" ‚ûî  ‚áæ  ‚Üí  ÀÉ ‚ûü ‚á¢ À≤ ‚Üó ‚Üí ‚Üí   À∑ ÀçÀç À≥ ∆ê  ùëì ùë°∆í …± ·ôÜ ÔΩî ·µÄ·¥µ·¥∫ …¥ …≥ ·¥ü

func! ScalaSyntaxAdditions ()

  call tools_scala#bufferMaps()
  call clearmatches()

  syntax match Normal "\v\=\=" conceal cchar=‚â°
  syntax match Normal "===" conceal cchar=‚â£
  " syntax match Normal "\s\zs\>\=\ze\s" conceal cchar=‚â•
  syntax match Normal "\v\+\+" conceal cchar=‚ß∫
  syntax match Normal "\v\|\|" conceal cchar=‚Äñ
  " syntax match Normal "\v\&\&" conceal cchar=Ôπ†

  " syntax match Normal '\vInt\ze(\W|\_$)' conceal cchar=I
  " syntax match Normal '\vstring\ze(\W|\_$)' conceal cchar=s
  syntax match Normal 'String\.' conceal cchar=s
  syntax match Normal 'String' conceal cchar=s
  syntax match Normal 'Int' conceal cchar=…™
  " syntax match Normal 'Int\.' conceal cchar=…™
  syntax match Normal '\vBoolean\ze(\W|\_$)' conceal cchar= ô
  " syntax match Normal 'true' conceal cchar=ùóç
  " syntax match Normal 'false' conceal cchar=ùñø
  syntax match Normal 't\zsrue' conceal
  syntax match Normal 'f\zsalse' conceal

  " syntax match Normal 'List\ze\W' conceal cchar=‚ü¨
  syntax match Normal '\vList\ze(\W|\_$)' conceal cchar=ÀÑ
  " syntax match Normal '\vSeq\ze(\W|\_$)' conceal cchar=ÀÖ
  syntax match Normal '\vSeq\ze(\W|\_$)' conceal cchar=·µò
  " syntax match Normal '\vSeq\ze(\W|\_$)' conceal cchar=·µõ
  syntax match Normal '\vSet\ze(\W|\_$)' conceal cchar=·¥∫
  syntax match Normal '\vArray\ze(\W|\_$)' conceal cchar=·¥¨
  syntax match Normal 'Map\ze\W' conceal cchar= ∫
  syntax match Normal 'empty' conceal cchar=‚àÖ
  syntax match Normal 'Iterable' conceal cchar=‚ü¶
  " syntax match Normal 'Array\ze\W' conceal cchar=‚ü¶
  " syntax match Normal 'Tuple' conceal cchar=T
  " syntax match Normal 'tuple\:\s' conceal cchar=T
  " syntax match Normal 'tuple\:\[' conceal cchar=T

  " syntax match Normal "def\ze\s" conceal cchar=‚Üí
  syntax match Normal "def\s" conceal
  syntax match Normal 'Unit' conceal cchar=‚ú¥
  syntax match Normal 'Option' conceal cchar=‚à¶
  syntax match Normal 'Either' conceal cchar=‚à•

  syntax match Normal "<-" conceal cchar=‚Üê
  " syntax match Normal "_\s<-\ze\s" conceal cchar=‚Ä¢
  syntax match Normal "_\ze\s*<-\s" conceal cchar= 

  syntax match Normal "()" conceal cchar=‚àò

  syntax match Normal "\v\=\>" conceal cchar=‚áí

  " The collon before a type or an object value
  syntax match Normal "\w\zs:\ze\s" conceal
  syntax match Normal ")\zs:" conceal cchar=ÀÉ
  syntax match Normal "\s\zs:\ze(" conceal cchar=ÀÉ
  " When the type collon is the last char e.g. in enum defs
  syntax match Normal "\v:\ze$" conceal
  " all :?
  syntax match Normal ":" conceal
  " syntax match Normal ")\s\zs=>\ze\s.*=>" conceal cchar=‚áæ
  syntax match Normal '::' conceal cchar=‚à∑

  syntax match Normal "^val\s" conceal
  syntax match Normal "\s\zsval\s" conceal

  syntax match Normal '"' conceal
  syntax match Normal '""' conceal cchar=‚àÖ
  syntax match Normal "\s\zss\"" conceal cchar="

  " TODO: can't match "export" twice? ~/Documents/Server-Dev/d_gql_edb/src/b_ramda_pipe_async_examples.ts#/export%20function%20ac
  " syntax match Normal "export\s\zsfunction\ze\s" conceal cchar=‚Üí
  " syntax match Normal "\v\(\)\s\=\>" conceal cchar=Àç
  " syntax match Normal "\v_\s\=\>" conceal cchar=Àç

  " syntax match Normal '\s\zs>\ze\s' conceal cchar=‚ñ∑
  " syntax match Normal '\s\zs<\ze\s' conceal cchar=‚óÅ

  " syntax match Normal 'i => {i' conceal cchar=_
  " syntax match Normal 'i => i' conceal cchar=¬ª
  " syntax match Normal 'x => x\ze\s' conceal cchar=_
  " syntax match Normal 'x => x\ze\.' conceal cchar=_

  syntax match Normal 'PartialFunction' conceal cchar=‚ûî
  syntax match Normal "\v\-\>" conceal cchar=‚ûî
  syntax match Normal '@tailrec' conceal cchar=‚Ü∂

  syntax match Normal '\vfor\ze(\W|\_$)' conceal cchar=‚äÉ
  syntax match Normal 'yield' conceal cchar=‚äÇ
  syntax match Normal '>>=' conceal cchar=‚´¶
  " andThen
  syntax match Normal 'andThen' conceal cchar=‚Ü£
  syntax match Normal '>>>' conceal cchar=‚Ü£
  " compose
  syntax match Normal '<<<' conceal cchar=‚àò
  syntax match Normal 'compose' conceal cchar=‚àò

  " syntax match Normal 'ZIO\ze\[' conceal cchar=·¥±
  syntax match Normal 'ZIO' conceal cchar=·¥±
  syntax match Normal 'UIO\ze\[' conceal cchar=·¥±
  syntax match Normal 'IO\ze\[' conceal cchar=·¥±
  syntax match Normal 'ZIO\.' conceal cchar=‚Åù
  syntax match Normal 'ZIO\.\$\.' conceal cchar=‚Åù
  syntax match Normal 'flatMap' conceal cchar=‚Ü£
  syntax match Normal 'tap' conceal cchar=‚åÑ
  " syntax match Normal 'tap' conceal cchar=‚âè
  syntax match Normal 'collect\ze\W' conceal cchar=‚âö
  syntax match Normal 'collect\zeZ' conceal cchar=‚âö
  syntax match Normal 'collect\zeH' conceal cchar=‚âö
  " syntax match Normal 'collect' conceal cchar=Íúõ
  syntax match Normal 'Any' conceal cchar=◊∞
  syntax match Normal 'Nothing' conceal cchar=‚ïå
  syntax match Normal 'Error' conceal cchar=‚äñ
  syntax match Normal 'Throwable' conceal cchar=‚äñ
  syntax match Normal 'fail' conceal cchar=‚äñ
  syntax match Normal 'Http' conceal cchar= ú
  syntax match Normal 'App\ze\W' conceal cchar=‚â°
  syntax match Normal 'ZIO.service' conceal cchar=‚äü
  syntax match Normal 'package\ze\s' conceal cchar=‚äü
  syntax match Normal 'package\ze\s' conceal cchar=‚äü
  syntax match Normal 'live' conceal cchar=Ôö∑
  syntax match Normal 'live:' conceal cchar=Ôö∑
  syntax match Normal '\vLive(:)?' conceal cchar=Ôö∑
  syntax match Normal 'ZLayer' conceal cchar=Ô¨ò
  syntax match Normal 'fromFunction' conceal cchar=‚âª
  syntax match Normal 'ULayer' conceal cchar=Ô¨ò
  syntax match Normal 'Layer' conceal cchar=Ô¨ò
  syntax match Normal 'Method\.' conceal cchar=‚Åù
  syntax match Normal 'Request' conceal cchar=‚âª
  syntax match Normal 'Response' conceal cchar=‚â∫
  syntax match Normal 'Random' conceal cchar=‚åò
  syntax match Normal 'extends' conceal cchar=‚üî

  syntax match Normal 'Exception' conceal cchar=‚óå
  " syntax match Normal 'IO\zeException' conceal cchar=‚´†
  syntax match Normal 'IOException' conceal cchar=‚äù

  syntax match Normal '"""' conceal cchar=‚ùû

  syntax match Normal 'orElse' conceal cchar=‚óá
  syntax match Normal 'orDie' conceal cchar=‚ïå
  syntax match Normal 'fork' conceal cchar=‚òº
  syntax match Normal '<>' conceal cchar=‚óá
  " syntax match Normal '\v\*\>' conceal cchar=‚ñ∑
  call matchadd('Conceal', '\v\*\>', 12, -1, {'conceal': '‚ñ∑'})
  syntax match Normal 'applyOrElse' conceal cchar=‚áæ
  syntax match Normal 'apply' conceal cchar=‚àù

  syntax match Normal 'if\ze\W' conceal cchar=Àª
  syntax match Normal 'else' conceal cchar=Àº
  syntax match Normal 'else\sif' conceal cchar=Àº
  syntax match Normal 'then\ze\W' conceal cchar=Àπ
  syntax match Normal 'when' conceal cchar=?

  syntax match Normal 'case' conceal cchar=À∞
  syntax match Normal '\vmatch\ze(\W|\_$)' conceal cchar=‚åã

  syntax match Normal 'map' conceal cchar=‚ûö
  syntax match Normal 'contramap' conceal cchar=‚Üñ
  syntax match Normal '\.\zsas\ze(' conceal cchar=Íúú

  syntax match Normal 'self' conceal cchar=‚àù
  syntax match Normal 'override' conceal cchar=‚üë
  syntax match Normal 'lazy' conceal cchar=~
  syntax match Normal 'final' conceal cchar=.
  syntax match Normal 'sealed' conceal cchar=.
  syntax match Normal 'private' conceal cchar=Àå
  syntax match Normal 'private\sval\s' conceal cchar=Àå
  syntax match Normal 'implicit' conceal cchar=ùëñ
  syntax match Normal 'infix' conceal cchar=ùëñ
  syntax match Normal 'implicitly' conceal cchar=ùëñ
  syntax match Normal 'using' conceal cchar=‚ä®
  syntax match Normal 'extension' conceal
  syntax match Normal 'import\s' conceal cchar=‚Åù
  syntax match Normal 'class' conceal cchar=C
  syntax match Normal 'case class' conceal cchar=ÀΩ
  syntax match Normal 'copy\ze\W' conceal cchar=ÀΩ
  syntax match Normal 'trait' conceal cchar=‚ü£
  syntax match Normal 'type\s' conceal
  syntax match Normal 'enum' conceal cchar=|
  syntax match Normal 'derive\ze\W' conceal cchar=‚åá
  syntax match Normal 'object' conceal cchar=Óòã
  syntax match Normal 'make' conceal cchar=Àñ
  syntax match Normal 'unbounded' conceal cchar=Àñ
  syntax match Normal 'succeed' conceal cchar=Íúú

  syntax match Normal '\s\zs\.' conceal cchar=Àç
  " syntax match Normal '\S\zs\.\ze\S' conceal cchar=Àç
  " syntax match Normal '\.\ze\S' conceal cchar=Àç
  syntax match Normal '\.\ze\S' conceal cchar= 

  syntax match Normal 'curried' conceal cchar=‚Äπ

  " display Type variables as small cursive letters
  syntax match Normal '\v(\s|\(|\[|\+)\zsA\ze(:|,|\]|\)|\s\=\>|\s(\>|\<|\=))' conceal cchar=ùëé
  syntax match Normal '\v(\s|\(|\[|\+)\zsR\ze(:|,|\]|\)|\s\=\>|\s(\>|\<|\=))' conceal cchar=ùëü
  syntax match Normal '\v(\s|\(|\[|\+)\zsE\ze(:|,|\]|\)|\s\=\>|\s(\>|\<|\=))' conceal cchar=ùëí
  syntax match Normal '\v(\s|\(|\[|\+)\zsB\ze(:|,|\]|\)|\s\=\>|\s(\>|\<|\=))' conceal cchar=ùëè
  syntax match Normal '\v(\s|\(|\[|\+)\zsC\ze(:|,|\]|\)|\s\=\>|\s(\>|\<|\=))' conceal cchar=ùëê
  syntax match Normal '\v(\s|\(|\[|\+)\zsS\ze(:|,|\]|\)|\s\=\>|\s(\>|\<|\=))' conceal cchar=ùë†
  syntax match Normal '\v(\s|\(|\[|\+)\zsT\ze(:|,|\]|\)|\s\=\>|\s(\>|\<|\=))' conceal cchar=ùë°
  syntax match Normal '\v(\s|\(|\[|\+)\zsV\ze(:|,|\]|\)|\s\=\>|\s(\>|\<|\=))' conceal cchar=ùë£
  syntax match Normal '\v(\s|\(|\[|\+)\zsU\ze(:|,|\]|\)|\s\=\>|\s(\>|\<|\=))' conceal cchar=ùë¢


  syntax match InlineTestDeclaration '\v^(lazy\s)?val\se\d_\i{-}\s\=' conceal cchar=‚Ä•
  " syntax match InlineTestDeclaration '\v^val\se\d_\i{-}\s\=\s' conceal cchar=‚†É
  syntax match InlineTestDeclaration '\v^val\sa\d_\i{-}\s\=' conceal cchar=‚Ä¶

  syntax match Normal '\v\/\/\>\susing\slib\s' conceal

  " Hide comment character at beginning of line
  " syntax match Normal '\v\s*\zs\/\/\s' conceal
  " syntax match Comment '\v\s\zs\/\/.*'
  " syntax match BlackBG '\v\/\/' conceal
  " syntax match Comment '\v\/\/\s\zs.*'
  " syntax match BlackBG '\v\/\/\s\zsi{-}'

  " This is effective in preventing the conceal unicode in normal comments
  syntax match Comment '\v\/\/\s\zs.*'

  " Only matchadd can coneal the comment chars when those are already match by the above syntax match!
  call matchadd('Conceal', '\/\/\s', 12, -1, {'conceal': ''})
  call matchadd('Conceal', '\p\s\zs\/\/', 12, -1, {'conceal': '‚†É'})
  call matchadd('Conceal', '^\/\/\s', 12, -1, {'conceal': ''})

  " This uses the same approach for the Java-Doc comments:
  " this line overwrites the unicode conceals
  " ISSUE: does it? .. it affected/prevented conceals after a multiplication (*) on normal lines
  " syntax match Comment '\v\*.*'

" /**
"  * Accum the `produce`d values `T` until `p` holds.
"  */
  syntax match Normal '\v\/\*\*' conceal cchar=‚†É
  " .. we can't use a normal syntax match to conceal the comment chars
  " syntax match Normal '\v\s\*\s' conceal
  " but use matchadd instead
  call matchadd('Conceal', '\v^\s\*\s', 12, -1, {'conceal': ''})
  syntax match Normal '\v\s\*\/' conceal


  " call matchadd('BlackBG', '\v\*.*', 12, -1 )

  " call matchadd('Conceal', '\s\/\/', 12, -1, {'conceal': ''})
  " call matchadd('Conceal', '\v^\s*\zs#\s', 12, -1, {'conceal': ''})
  " call matchadd('Conceal', '\v^\s*\zs\/\/\s', 12, -1, {'conceal': ''})

  " This replaces: call CodeMarkupSyntaxHighlights()
  syntax match BlackBG '\v‚îÄ(\^|\s)\s{2}\S.*'
  " Hilde \" before comment after code
  " call matchadd('Conceal', '\s\zs\#\ze\s', 12, -1, {'conceal': ''})
  " call matchadd('Conceal', '\s\zs\\/\/\ze\s', 12, -1, {'conceal': ''})
  " Conceal "%20" which is used for "h rel.txt" with space
  " call matchadd('Conceal', '%20', 12, -1, {'conceal': ' '})
  " call matchadd('Conceal', '#/', 12, -1, {'conceal': '|'})
  " ~/.vim/notes/notes-navigation.md#/Create%20hyperlink%20to

  set conceallevel=2 " ‚ñ†
  set concealcursor=ni " ‚ñ≤
  " This will add one space before the foldmarker comment with doing "zfaf": func! ..ns() "{{_{
  " set commentstring=\ \"%s
  " set commentstring=\ \/\/%s

endfunc


