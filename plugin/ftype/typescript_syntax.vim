
func! TsSyntaxAdditions ()

  call clearmatches()

  syntax match Normal 'import\s' conceal cchar=‚Åù

  " for Arangodb AQL
  syntax keyword aqlKeywords
        \ LET
        \ FOR
        \ IN
        \ FILTER
        \ UPDATE
        \ WITH

  syntax match Normal 'switch' conceal cchar=‚åã
  syntax match Normal 'case' conceal cchar=À∞
  syntax match Normal '\s\zsif\ze\W' conceal cchar=Àª
  syntax match Normal 'else' conceal cchar=À∫
  syntax match Normal 'else\sif' conceal cchar=Àº
  " syntax match Normal 'then\ze(\W|\_$)' conceal cchar=Àπ
  " syntax match Normal '\v(\s|^)\zsthen\ze(\s|\_$)' conceal cchar=Àπ


  syntax match Normal "\v\=\=" conceal cchar=‚â°
  syntax match Normal "===" conceal cchar=‚â£
  " syntax match Normal "\s\zs\>\=\ze\s" conceal cchar=‚â•
  syntax match Normal "\v\+\+" conceal cchar=‚ß∫
  syntax match Normal "\v\|\|" conceal cchar=‚Äñ
  syntax match Normal "\v\&\&" conceal cchar=Ôπ†

  syntax match Normal '\vnumber\ze(\W|\_$)' conceal cchar=N
  syntax match Normal '\vstring\ze(\W|\_$)' conceal cchar=S
  syntax match Normal 'String\.' conceal cchar=S
  syntax match Normal 'String' conceal cchar=S
  syntax match Normal 'Number\.' conceal cchar=N
  syntax match Normal '\vboolean\ze(\W|\_$)' conceal cchar=B
  syntax match Normal 'array\ze\W' conceal cchar=‚ü¶

  syntax match Normal 'i\zsdentity' conceal cchar=d

  " syntax match Normal 'List\ze\W' conceal cchar=‚ü¨
  syntax match Normal '\vList\ze(\W|\_$)' conceal cchar=L
  " syntax match Normal 'Array\ze\W' conceal cchar=‚ü¶
  syntax match Normal 'Array' conceal cchar=A
  syntax match Normal 'Tuple' conceal cchar=T
  syntax match Normal 'tuple\:\s' conceal cchar=T
  syntax match Normal 'tuple\:\[' conceal cchar=T

  syntax match Normal '({' conceal cchar=‚ü®
  syntax match Normal '})' conceal cchar=‚ü©

  syntax match Normal "\v\=\>" conceal cchar=‚áí

  " The collon before a type or an object value
  syntax match Normal "\w\zs:\ze\s" conceal
  syntax match Normal ")\zs:" conceal cchar=ÀÉ
  syntax match Normal ")\s\zs=>\ze\s.*=>" conceal cchar=‚áæ

  syntax match Normal "const\s" conceal
  syntax match Normal "readonly\s" conceal cchar=‚Äß
  syntax match Normal 'private' conceal cchar=Àå
  syntax match Normal 'public' conceal cchar=‚àò
  syntax match Normal '\s\zsas\ze\s' conceal cchar=¬´

  syntax match Normal "'" conceal
  syntax match Normal ";" conceal
  syntax match Normal "''" conceal cchar=‚àÖ
  syntax match Normal '"' conceal
  syntax match Normal '""' conceal cchar=‚àÖ

  " JSDoc comments
  syntax match Normal "\/\*\*" conceal
  syntax match Normal "\/\*\*\s" conceal
  syntax match Normal "^\s\*\s" conceal
  syntax match Normal "^\*\s" conceal

  " TS conceals
  " TODO: can't match "export" twice? ~/Documents/Server-Dev/d_gql_edb/src/b_ramda_pipe_async_examples.ts#/export%20function%20ac
  " syntax match Normal "export\s\zsfunction\ze\s" conceal cchar=‚Üí
  syntax match Normal "function\ze\s" conceal cchar=‚Üí
  syntax match Normal "^export\ze\s" conceal cchar=‚à∑
  syntax match Normal "gql`" conceal cchar=‚ñµ
  syntax match Normal "sql`" conceal cchar=‚ñµ
  syntax match Normal "return\ze\s" conceal cchar=‚Üê
  syntax match Normal "return\zeA" conceal cchar=‚Üê
  syntax match Normal "async\ze\s" conceal cchar=‚Ä¢
  syntax match Normal "Async\ze\W" conceal cchar=‚Ä¢
  syntax match Normal "await\ze\s" conceal cchar=‚âÄ
  syntax match Normal "Promise" conceal cchar=~
  syntax match Normal "Deferred" conceal cchar=~
  syntax match Normal "undefined" conceal cchar=ùáá
  syntax match Normal "unknown" conceal cchar=‚™¶
  syntax match Normal "never" conceal cchar=Àç
  syntax match Normal "null\ze\s" conceal cchar=‚®Ü
  syntax match Normal "this\." conceal cchar=‚´∞
  syntax match Normal "\v\(\)\s\=\>" conceal cchar=Àç
  syntax match Normal "\v_\s\=\>" conceal cchar=Àç
  syntax match Normal "void" conceal cchar=‚ú¥

  syntax match Normal '<' conceal cchar=‚ÅΩ
  syntax match Normal '>' conceal cchar=‚Åæ
  syntax match Normal '\s\zs>\ze\s' conceal cchar=‚ñ∑
  syntax match Normal '\s\zs<\ze\s' conceal cchar=‚óÅ

  syntax match Normal '<div' conceal cchar=‚ãÆ
  syntax match Normal '<div>' conceal cchar=‚ãÆ
  syntax match Normal '</div>' conceal cchar=‚ãÆ
  syntax match Normal '/>' conceal cchar=Àó
  syntax match Normal '|>' conceal cchar=‚áæ

  " syntax match Normal '\s\zstype_=' conceal

  syntax match Normal 'interface' conceal cchar=‚óà
  syntax match Normal 'type' conceal cchar=‚óá
  syntax match Normal 'typeof' conceal cchar=‚óá
  syntax match Normal 'class' conceal cchar=‚ñ°
  syntax match Normal 'constructor' conceal cchar=‚âà
  syntax match Normal 'enum\ze\\s' conceal cchar=|

" ‚ûπ  ‚§§  ‚¨Ä  ‚¨à  ‚ßº  ‚™¶ ‚á° ‚áû  ‚áæ  ~‚ûö
" ·ê£ ·ê§  ·ê•  ·ê¶·êß  ·ê®  ·ëÜ   ·ëÑ   ·ëã  ·ëì   ·ë£   ·íæ  ·ìã  ·ì©  ·ì´ ‚Ä∫

  syntax match Normal 'map' conceal cchar=‚ûö
  syntax match Normal 'and\zeThen' conceal cchar=~
  syntax match Normal 'Then\ze\W' conceal cchar=‚ûö
  syntax match Normal 'pipe' conceal cchar=‚Üí
  syntax match Normal 'flow' conceal cchar=‚áæ
  syntax match Normal 'i => i' conceal cchar=¬ª
  syntax match Normal 'concat' conceal cchar=‚óá
  syntax match Normal 'combine' conceal cchar=‚óá
  syntax match Normal 'try\ze\s' conceal cchar=‚üë
  syntax match Normal 'catch\s\ze' conceal cchar=‚Üì
  syntax match Normal 'finally\s\ze' conceal cchar=·ê∂
  syntax match Normal 'Error' conceal cchar=‚ä°
  syntax match Normal 'throw' conceal cchar=‚äñ
  syntax match Normal 'JSON' conceal cchar=‚ùâ
  syntax match Normal 'new' conceal cchar=‚âà

  syntax match Normal 'i => {i' conceal cchar=_
  syntax match Normal 'x => x\ze\s' conceal cchar=_
  syntax match Normal 'x => x\ze\.' conceal cchar=_

  syntax match Normal 'JSX.Element' conceal cchar=‚äÉ
  syntax match Normal 'className=' conceal cchar=‚óá

  " Effect TS Plus ·¥à ·¥á ·¥± ·¥≤ ·µâ
  " syntax match Normal 'Effect' conceal cchar=‚Åù
  syntax match Normal 'Effect\ze<' conceal cchar=·¥±
  syntax match Normal 'Effect\.' conceal cchar=‚Åù
  syntax match Normal 'Effect\.\$\.' conceal cchar=‚Åù
  syntax match Normal 'AssociativeIdentity\.' conceal cchar=‚Åù
  syntax match Normal 'Associative\.' conceal cchar=‚Åù
  syntax match Normal 'flatMap' conceal cchar=‚Ü£

  syntax match Normal '\s\zs\.' conceal cchar=Àç
  syntax match Normal '\S\zs\.\ze\S' conceal cchar=Àç

  " Match.tag( exp, {
  syntax match Normal 'Match.tag(' conceal cchar=‚äÇ



  " const v1 = Do(($) => {
  syntax match Normal 'Do(($) => {' conceal cchar=‚äá
  syntax match Normal '=\s\$(' conceal cchar=‚á†
  syntax match Normal '$(' conceal cchar=Àç

  " const v1 = Effect.Do()
  syntax match Normal 'Effect.Do()' conceal cchar=‚äá
  syntax match Normal '\v.bind(Value)?\(' conceal
  syntax match Normal '$(' conceal cchar=Àç

  " syntax match Normal '\v\S\s\zs\)$' conceal
  " syntax match Normal '\v\s\zs\)' conceal
  " syntax match Normal '\v\s\zs\)$' conceal cchar=·õ´
  " syntax match Normal '\v\(\ze\s' conceal
  " TODO use a lookaround
  " syntax match Normal '\v\$@!.*\zs\)$' conceal cchar=·õ´

  " EdgeDB query builder object: e.select()
  syntax match Normal "\s\zse\." conceal cchar=·õ´
  syntax match Normal "\s\zstrue" conceal cchar=·õ´
  " syntax match Normal "ilike" conceal cchar=‚àº
  " syntax match Normal "like" conceal cchar=‚àº
  syntax match Normal "order_by\:" conceal cchar=Íúõ
  syntax match Normal "filter\:" conceal cchar=‚âö
  syntax match Normal "\.\.\." conceal cchar=‚Ä¶
  syntax match Normal "\*\/" conceal


  syntax match InlineTestDeclaration '\v^const\se\d_\i{-}\s\=' conceal cchar=‚Ä•
  syntax match InlineTestDeclaration '\v^const\sa\d_\i{-}\s\=' conceal cchar=‚Ä¶
  syntax match InlineTestDeclaration '\v^export\sconst\se\d_\i{-}\s\=' conceal cchar=‚Ä•
  syntax match InlineTestDeclaration '\v^export\sconst\sa\d_\i{-}\s\=' conceal cchar=‚Ä¶
  syntax match InlineTestDeclaration '\v^export\sconst\se\d_\i{-}\:' conceal cchar=‚Ä•
  " syntax match ConcealQuotes "'" conceal
  " syntax match ConcealQuotes '"' conceal

  " call CodeMarkupSyntaxHighlights()
  " Hide comment character at beginning of line
  " call matchadd('Conceal', '\v^\s*\zs#\s', 12, -1, {'conceal': ''})


  " Hilde \" before comment after code
  " call matchadd('Conceal', '\s\zs\#\ze\s', 12, -1, {'conceal': ''})

  " Hide comments
  call matchadd('Conceal', '\v^\s*\zs\/\/\s', 12, -1, {'conceal': ''})
  call matchadd('Conceal', '\s\zs\\/\/\ze\s', 12, -1, {'conceal': ''})

  " Conceal "%20" which is used for "h rel.txt" with space
  " call matchadd('Conceal', '%20', 12, -1, {'conceal': ' '})
  " call matchadd('Conceal', '#/', 12, -1, {'conceal': '|'})
  " ~/.vim/notes/notes-navigation.md#/Create%20hyperlink%20to

  set conceallevel=2 " ‚ñ†
  set concealcursor=ni " ‚ñ≤
  " This will add one space before the foldmarker comment with doing "zfaf": func! ..ns() "{{_{
  " set commentstring=\ \"%s
  " set commentstring=\ \/\/%s


  " syntax match BlackBG '\v‚îÄ\s{5}\S.*'
  " syntax match BlackBG '\v‚îÄ\s{4}\S.*'
  syntax match BlackBG '\v‚îÄ\s.*'
  syntax match BlackBG '\v‚îÄ\^.*'

endfunc




