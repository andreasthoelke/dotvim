


" temp disabled! to use the gs.. maps for local (scala) preview server

  " PERVIEW-SERVER MAPS (see ts_preview_server_client.vim)
  " nnoremap <silent><buffer>         gss :call Scala_SetServerApp_ScalaCLI()<cr>
  " nnoremap <silent><buffer>         ,gsr :call Scala_ServerRestart()<cr>
  " nnoremap <silent><buffer>         ,,gsr :call Scala_ServerRestartTerm()<cr>
  " nnoremap <silent><buffer>         gsS :call Scala_ServerStop()<cr>
  " PERVIEW-SERVER MAPS (see ts_preview_server_client.vim)


func! Scala_SetServerApp_ScalaCLI()
  let printerFilePath = getcwd() . '/PreviewServer_Ember.scala'

  let hostLn = searchpos( '\v^(lazy\s)?val\s', 'cnbW' )[0]
  let identif = matchstr( getline(hostLn ), '\v(val|def)\s\zs\i*\ze\W' )
  let identif = Sc_PackagePrefix() . Sc_ObjectPrefix(hostLn) . identif

  call VirtualRadioLabel_lineNum( "« httpApp" , hostLn )

  let bindingLine = "val httpApp = " . identif

  let printerLines = readfile( printerFilePath, '\n' )
  let printerLines[1] = bindingLine

  call writefile( printerLines, printerFilePath )
endfunc


let g:Scala_ServerCmd_Zio   = "scala-cli . --main-class PreviewServer --class-path resources -nowarn -Ymacro-annotations"
let g:Scala_ServerCmd_Ember = "scala-cli . --main-class server_ember.PreviewServer_Ember --class-path resources -nowarn -Ymacro-annotations"



" ─   PreviewServer                                     ──
" async running process scala-cli . --main-class PreviewServer
" can be started in term (to debug) or as job (invisible)
" no need for callback handlers
" can be jobstop'ed and restarted with new compiled scala-cli . --main-class PreviewServer

func! Scala_ServerRestart ()
  if !exists('g:Scala_ServerID')
    call Scala_ServerStart()
  else
    call Scala_ServerStop()
    call Scala_ServerStart()
  endif
endfunc

func! Scala_ServerRestartTerm ()
  if !exists('g:Scala_ServerID')
    call Scala_ServerStartT()
  else
    call Scala_ServerStop()
    call Scala_ServerStartT()
  endif
endfunc


func! ScalaServerMainCallback(job_id, data, event)
  " call Scala_ServerClientRequest_rerun()
  " call T_DelayedCmd( "call Scala_ServerClientRequest_rerun()", 1000 )
  return
  let lines = RemoveTermCodes( a:data )
  if !len( lines )
    return
  endif
  silent let g:floatWin_win = FloatingSmallNew ( lines )
  silent call FloatWin_FitWidthHeight()
  silent wincmd p
endfunc


let g:ScalaServerCallbacks = {
      \ 'on_stdout': function('ScalaServerMainCallback'),
      \ 'on_stderr': function('ScalaReplErrorCallback'),
      \ 'on_exit': function('ScalaReplExitCallback')
      \ }


func! Scala_ServerStart ()
  if exists('g:Scala_ServerID') | call T_echo( 'Scala_Server is already running' ) | return | endif
  silent let g:Scala_ServerID = jobstart( g:Scala_ServerCmd_Ember, g:ScalaServerCallbacks )
endfunc

func! Scala_ServerStartT ()
  if exists('g:Scala_ServerID') | call T_echo( 'Scala_Server is already running' ) | return | endif
  exec "8new"
  let g:Scala_ServerID = termopen( g:Scala_ServerCmd_Ember )
  silent wincmd p
endfunc


func! Scala_ServerStop ()
  if !exists('g:Scala_ServerID') | call T_echo( 'Scala_Server is not running' ) | return | endif
  silent call jobstop( g:Scala_ServerID )
  unlet g:Scala_ServerID
endfunc




